Template:-

vector<int> BellmonFord(int src,int n,vector<vector<int>>&edges){
        vector<int>distance(n,1e8);
        distance[src]=0;

        //relax all edges n-1 times
        for(int i=0;i<n-1;i++) {
            for(auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if (distance[u] != 1e8 && distance[u] + wt < distance[v]) {
                    distance[v] = distance[u] + wt;
                }
            }
        }
        // Nth relaxation to check negative cycle
        for (auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if (distance[u] != 1e8 && distance[u] + wt < distance[v]) {
                return { -1};
            }
        }

        return distance;
}

Time Complexity:-O(V*E)  // V->total number of nodes
                         // E->total number of edges

Application:-
Note:- Dijkstra fails to find shortest path from source to other nodes when graph have negative edge weights.

Shortest path from source to other nodes when graph contains negative edge weights.
Detects negative cycle too.
