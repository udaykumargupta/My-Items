class Solution {
    private:
    int time=1;
    void dfs(int node,int parent,vector<int>&low,vector<int>&tin,vector<int>&visited,vector<int>&mark,vector<int>adj[]){
        visited[node]=1;
        tin[node]=low[node]=time;
        time++;
        int child=0;
        for(auto it:adj[node]){
            if(it==parent)continue;
            if(!visited[it]){
                dfs(it,node,low,tin,visited,mark,adj);
                low[node] = min(low[node], low[it]);
                if(low[it]>=tin[node] && parent!=-1)mark[node]=1; // difference from bridges in graph
                child++;
            }
            else low[node] = min(low[node], tin[it]); //difference from bridges in graph
        }
        if(child>1 && parent==-1){
            mark[node]=1;
        }
    }
  public:
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        // Code here
        vector<int>visited(V,0);
        vector<int>low(V,0);
        vector<int>tin(V,0);
        vector<int>ans(V,0);
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, -1, low, tin, visited, ans, adj);
            }
        }
        vector<int>res;
        for(int i=0;i<V;i++){
            if(ans[i]==1)res.push_back(i);
        }
        if(res.size()==0)return {-1};
        return res;
    }
};
