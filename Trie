struct TrieNode {
    TrieNode* children[26]; // Pointers to children nodes for 'a' through 'z'
    bool isEndOfWord;       // True if this node marks the end of a word

    // Constructor to initialize a new node
    TrieNode() {
        isEndOfWord = false;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
    }
};

class Trie {
private:
    TrieNode* root;

public:
    // Constructor to initialize the Trie with a root node
    Trie() {
        root = new TrieNode();
    }

    /**
     * Inserts a word into the trie.
     * @param word The word to insert.
     */
    void insert(std::string word) {
        TrieNode* current = root;
        for (char ch : word) {
            int index = ch - 'a';
            if (current->children[index] == nullptr) {
                // If the path doesn't exist, create a new node
                current->children[index] = new TrieNode();
            }
            // Move to the next node
            current = current->children[index];
        }
        // Mark the last node as the end of the word
        current->isEndOfWord = true;
    }

    /**
     * Searches for a word in the trie.
     * @param word The word to search for.
     * @return True if the word is found, false otherwise.
     */
    bool search(std::string word) {
        TrieNode* current = root;
        for (char ch : word) {
            int index = ch - 'a';
            if (current->children[index] == nullptr) {
                // If a character's node doesn't exist, the word isn't in the trie
                return false;
            }
            current = current->children[index];
        }
        // The word is found only if it exists and is marked as a complete word
        return current != nullptr && current->isEndOfWord;
    }
};
