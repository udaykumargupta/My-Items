tin[]->time of insertion
low[]->minimum lowest time of insertion of all the adjacent nodes apart from parent node

class Solution {
    int timer=1;
    void dfs(int node,int parent,vector<int>&visited,vector<int>&low,vector<int>&tin,vector<vector<int>>&adj,vector<vector<int>>&ans){
        visited[node]=1;
        tin[node]=timer;
        low[node]=timer;
        timer++;
        for(auto it:adj[node]){
            if(it==parent)continue;
            if(!visited[it]){
                dfs(it,node,visited,low,tin,adj,ans);
                if(low[it]>tin[node]){
                    ans.push_back({it,node});
                }
            }
            low[node]=min(low[it],low[node]);
        }
    }
public:
    vector<vector<int>> bridgesInGraph(int n, vector<vector<int>>& connections) {
        vector<vector<int>>adj(n);
        for(auto it:connections){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
      
        vector<vector<int>>ans;
        vector<int>visited(n,0);
        vector<int>tin(n,0);
        vector<int>low(n,0);
        dfs(0,-1,visited,low,tin,adj,ans);
        return ans;
    }
};
