1>sort the vertices according to the finish time
2>reverse the graph
3>apply dfs according to the finish time

class Solution {
private:
    void dfs(int node,stack<int>&st,vector<int>&visited,vector<vector<int>>&adj){
        visited[node]=1;
        for(auto it:adj[node]){
            if(!visited[it]){
                dfs(it,st,visited,adj);
            }
        }
        st.push(node);
    }

    void dfs2(int node,vector<int>&visited,vector<vector<int>>&adj){
        visited[node]=0;
        for(auto it:adj[node]){
            if(visited[it]==0)continue;
            dfs2(it,visited,adj);
        }
    }

public:
    int kosaraju(vector<vector<int>>& adj) {
        int n=adj.size();
        stack<int>st;
        vector<int>visited(n,0);
        //O(V+E)
        for(int i=0;i<n;i++){
            if(visited[i])continue;
            dfs(i,st,visited,adj);
        }
        //O(V+E)
        vector<vector<int>>adj2(n);
        for(int i=0;i<n;i++){
            for(auto it:adj[i]){
                adj2[it].push_back(i);
            }
        }
        int count = 0;
        //O(V+E)
        while(!st.empty()){
            int a=st.top();
            st.pop();
            if(!visited[a])continue;
            count++;
            dfs2(a,visited,adj2);
        }

        return count;
    }
};
