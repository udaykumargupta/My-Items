KMP(Knuth-Morris-Pratt) Algorithm:-is a string-searching algorithm which is used to find a pattern(string) within large texts efficiently.
                                   LPS(LPS is the Longest Proper Prefix which is also a Suffix) array of pattern is used
                                   example:- pattern=aaacaaaa
                                             LPS    =01201233
ComputeLPS(vector<int>&lps,string &pattern){
  int n=pattern.size();
  int len=0; //length of previous longest prefix and suffix which were equal 
  lps[0]=0;
  int i=1;
  while(i<n){
    if(pattern[i]==pattern[len]){
      len++;
      lps[i]=len;
      i++;
    }
    else{
      if(len!=0){
        len=lps[len-1];
      }
      else{
        lps[i]=0;
        i++;
      }
  }
}
}

        vector <int> search(string pat, string txt) {
            int N = txt.length();
            int M = pat.length();
            vector<int> result;
            
            // Create an LPS array to store the longest proper prefix which is also a suffix
            //lps[i] = the longest proper prefix of pat[0..i] which is also a suffix of pat[0..i]. 
            vector<int> lps(M, 0);
            computeLPS(pat, lps);
        
            int i = 0; // Index for text
            int j = 0; // Index for pattern
        
            while (i < N) {
                if (pat[j] == txt[i]) {
                    i++;
                    j++;
                }
        
                if (j == M) {
                    result.push_back(i-j+1); //Pattern found at index i-j+1 (If you have to return 1 Based indexing, that's why added + 1)
                    j = lps[j - 1];
                } else if (i < N && pat[j] != txt[i]) {
                    if (j != 0) {
                        j = lps[j - 1];
                    } else {
                        i++;
                    }
                }
            }
            
            return result;
        }
     
};

KMP algorithm template;
    vector<int> kmpMatch(const string& text, const string& pat) {
        int n = text.size(), m = pat.size();
        if (m == 0 || n < m)
            return {};
        vector<int> lps(m, 0);
        for (int i = 1, len = 0; i < m; ++i) {
            while (len && pat[i] != pat[len])
                len = lps[len - 1];
            if (pat[i] == pat[len])
                ++len;
            lps[i] = len;
        }
        vector<int> pos;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j && text[i] != pat[j])
                j = lps[j - 1];
            if (text[i] == pat[j])
                ++j;
            if (j == m) {
                pos.push_back(i - m + 1);
                j = lps[j - 1];
            }
        }
        return pos;
    }
    
